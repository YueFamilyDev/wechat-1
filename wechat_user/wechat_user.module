<?php
include_once 'wechat_user.features.inc';
define('WUUPRE', 'wx_');
/**
 * Implements hook_menu().
 */
function wechat_user_menu() {
  //认证路径
  $items['wechat/auth'] = array(
    'title' => 'Wechat Login',
    'page callback' => 'wechat_user_auth',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  //登录回调
  $items['wechat/login'] = array(
    'title' => 'Wechat Login',
    'page callback' => 'wechat_user_login',
    'page arguments' => array('user', 'error', '1'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['wechat/userinfo'] = array(
    'title' => 'Wechat Login',
    'page callback' => 'wechat_user_login',
    'page arguments' => array('user', 'error', '2', 'snsapi_userinfo'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  //自定义登录回调
  $items['wechat/user/login'] = array(
    'title' => 'Wechat Login',
    'page callback' => 'wechat_user_login_two',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/wechat_user'] = array(
    'title' => '微信用户设置',
    'description' => '微信用户设置，如：微信登录自动注册为某角色，刷新用户信息等。',
    'page callback' => 'wechat_user_settings_page',
    'access callback' => 'user_access',
    'access arguments' => array('wechat user update user info'),
    //'file' => 'wechat_user.forms.inc',
  );

  $items['admin/structure/wechat_user/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  return $items;
}

function wechat_user_edit_access($current_user) {
  global $user;
  if ($user->uid == $current_user->uid) {
    return TRUE;
  }
  if (user_access('admin')) {
    return TRUE;
  }

  return FALSE;
}


function wechat_user_settings_page() {
  $output = '';
  $form = drupal_get_form('wechat_user_op_user');
  $output .= render($form);
  return $output;
}


/**
 * Implements hook_theme().
 */
function wechat_user_theme($existing, $type, $theme, $path) {
  return array(
    'wechat_user_view_page' => array(
      'variables' => array(
        'wechat_user' => NULL,
      ),
      'path' => $path . '/theme',
      'template' => 'wechat_user_view_page',
    ),
    'wechat_user_qr_create' => array(
      'variables' => array(
        'user' => NULL,
      ),
      'path' => $path . '/theme',
      'template' => 'wechat_user_qr_create',
    ),
  );
}

function wechat_user_op_user($form, &$form_state) {
  $form['openid'] = array(
    '#type' => 'fieldset',
    '#title' => t('更新单个用户信息'),
    '#weight' => 3,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );
  $form['openid']['value'] = array(
    '#type' => 'textfield',
    '#title' => t('微信用户OpenId'),
    '#size' => 60,
    '#maxlength' => 128,
    '#description' => t('填写需要更新的微信用户OpenId，不填写则更新所有微信用户.'),
  );
  $form['openid']['update_user_info'] = array(
    '#type' => 'submit',
    '#submit' => array('wechat_user_openid_update_user_info'),
    '#value' => t('更新用户信息'),
  );

  $form['update'] = array(
    '#type' => 'fieldset',
    '#title' => t('同步当前站点用户信息'),
    '#weight' => 3,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );
  $form['update']['update_user_info'] = array(
    '#type' => 'submit',
    '#submit' => array('wechat_user_update_update_user_info'),
    '#value' => t('同步当前站点用户信息'),
  );

  $form['pull'] = array(
    '#type' => 'fieldset',
    '#title' => t('同步所有用户信息'),
    '#weight' => 3,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );
  $form['pull']['pull_user_info'] = array(
    '#type' => 'submit',
    '#submit' => array('wechat_user_pull_pull_user_info'),
    '#value' => t('同步所有用户信息'),
  );
  return $form;
}

function wechat_user_openid_update_user_info($form, &$form_state) {
  $openid = $form_state['values']['openid']['value'];
  if (!empty($openid)) {
    wechat_user_registry_user($openid);
  }
}


function wechat_user_pull_pull_user_info($form, &$form_state) {

  $wechat_obj = wechat_api_init_wechatobj();
  $user_list = $wechat_obj->getUserList();
  $openid_list = $user_list['data']['openid'];

  //后期改为批处理操作防止超时。
  //wechat_user_user_registry($openid_list);
  $operations = array();
  foreach ($openid_list as $openid) {
    $operations[] = array(
      'wechat_user_registry_user',
      array($openid)
    );
  }


  batch_set(array(
    'operations' => $operations,
    'title' => t('微信用户信息更新'),
  ));

}

function wechat_user_update_update_user_info($form, &$form_state) {
  $entities = wechat_user_load_multiple(FALSE);
  $operations = array();
  foreach ($entities as $entity) {
    $operations[] = array(
      'wechat_user_registry_user',
      array($entity->openid)
    );
  }
  batch_set(array(
    'operations' => $operations,
    'title' => t('更新当前站点的微信用户信息'),
  ));
//  dpm($entities);
//  dpm($form_state);
}

function wechat_user_login_two() {

  $goto = $_GET['goto'];
  $error = $_GET['error'];
  $state = $_GET['state'];
  $type = $_GET['type'];

//return 'dsddddddddd';
  $we_obj = wechat_api_init_wechatobj();
  $auth_url = $we_obj->getOauthRedirect(url('wechat/auth', array(
    'absolute' => TRUE,
    'query' => array('destination' => $goto, 'error' => $error)
  )), $state, $type);
  drupal_goto($auth_url);
}

function wechat_user_user_registry($openid_list) {
  foreach ($openid_list as $user_open_id) {
    wechat_user_registry_user($user_open_id);
  }
}

function wechat_user_registry_user($user_open_id) {
  $wechat_obj = wechat_api_init_wechatobj();
  $user_info = $wechat_obj->getUserInfo($user_open_id);
  if ($user_info['subscribe']) {//判断是否关注
    $user_name = 'wx_' . $user_open_id;
    $user = user_load_by_name($user_name);
    if (!$user) {//不存在则创建
      //dpm($user_info);
      $wechat_user_entity = entity_create('wechat_user', array());
      // auto register
      $user_name = WUUPRE . $user_open_id;

      $new_user = array(
        'name' => $user_name,
        'pass' => user_password(),
        'status' => 1,
      );
      // $account returns user object
      $account = user_save(NULL, $new_user);
      $account_wrapper = entity_metadata_wrapper('user', $account);
      $nickname = utf8_encode($user_info['nickname']);

//    user_info 模块提供
      $account_wrapper->field_user_name->set($user_info['nickname']);
      $account_wrapper->save();

      $wechat_user_entity->uid = $account->uid;

      $wechat_user_entity->openid = $user_info['openid'];
      $wechat_user_entity->subscribe = $user_info['subscribe'];
      $wechat_user_entity->nickname = $nickname;//暂时无法处理特殊字符，不自动使用昵称。$user_info['nickname'];
      $wechat_user_entity->sex = $user_info['sex'];
      $wechat_user_entity->province = $user_info['province'];
      $wechat_user_entity->city = $user_info['city'];
      $wechat_user_entity->country = $user_info['country'];
      $wechat_user_entity->headimgurl = $user_info['headimgurl'];
      $wechat_user_entity->subscribe_time = $user_info['subscribe_time'];

      $wechat_user_entity->save();

      return $account;
    }
    else {//存在则更新

      $account_wrapper = entity_metadata_wrapper('user', $user);
      $nickname = utf8_encode($user_info['nickname']);

      $wechat_user_entity = wechat_user_load($user->uid);
      $wechat_user_entity->nickname = $nickname;
      $wechat_user_entity->save();


      //    user_info 模块提供
      $account_wrapper->field_user_name->set($user_info['nickname']);
      $account_wrapper->save();
      return $user;
    }
  }
  return FALSE;
}

//
///**
// * Implements hook_field_presave().
// */
//function wechat_user_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
//  dpm($field);
//}
//
///**
// * Implements hook_field_attach_presave().
// */
//function wechat_user_field_attach_presave($entity_type, $entity) {
//  if ($entity_type == 'user') {
//    $entity_metadata_wrapper = entity_metadata_wrapper('user', $entity);
//    $value = $entity_metadata_wrapper->field_user_name->value();
//    $entity_metadata_wrapper->field_user_name->set(utf8_encode($value));
//  }
//}
//
///**
// * Implements hook_field_load().
// */
//function wechat_user_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
//  dpm($field);
//}
//
///**
// * Implements hook_field_prepare_view().
// */
//function wechat_user_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
//  dpm($entity_type);
//}
//
///**
// * Implements hook_field_prepare_translation().
// */
//function wechat_user_field_prepare_translation($entity_type, $entity, $field, $instance, $langcode, &$items, $source_entity, $source_langcode) {
//  dpm($entity_type);
//}
//
///**
// * Implements hook_field_attach_prepare_translation_alter().
// */
//function wechat_user_field_attach_prepare_translation_alter(&$entity, $context) {
//  dpm($entity);
//}
//
///**
// * Implements hook_entity_load().
// */
//function wechat_user_entity_load($entities, $type) {
//  if ($type == 'user') {
//    foreach ($entities as $entity) {
//      $value = $entity->field_user_name['und'][0]['value'];
//      $entity->field_user_name['und'][0]['value'] = utf8_decode($value);
//      $entity->field_user_name['und'][0]['safe_value'] = utf8_decode($value);
//    }
//  }
//}
//
//
///**
// * Implements hook_realname_alter().
// */
//function wechat_user_realname_alter(&$realname, $account) {
//  dpm($account);
//}
//
///**
// * Implements hook_field_attach_preprocess_alter().
// */
//function wechat_user_field_attach_preprocess_alter(&$variables, $context) {
//  dpm($variables);
//  dpm($context);
//}
//
///**
// * Implements hook_field_attach_load().
// */
//function wechat_user_field_attach_load($entity_type, $entities, $age, $options) {
////  dpm($entity_type);
////  dpm($entities);
////  dpm($age);
////  dpm($options);
////  $entity = reset($entities);
////  $entity_metadata_wrapper = entity_metadata_wrapper('user', $entity);
////  $value = $entity_metadata_wrapper->field_user_name->value();
////  $entity_metadata_wrapper->field_user_name->set(utf8_decode($value));
//}
//
///**
// * Implements hook_field_attach_view_alter().
// */
//function wechat_user_field_attach_view_alter(&$output, $context) {
//  dpm($output);
//  dpm($context);
//}
//
///**
// * Implements hook_form_alter().
// */
//function wechat_user_form_alter(&$form, &$form_state, $form_id) {
//  dpm($form_id);
//  if ($form_id == 'user_profile_form') {
//    dpm($form);
//  }
//}


/**
 * Implements hook_entity_info().
 */
function wechat_user_entity_info() {
  $return['wechat_user'] = array(
    'label' => t('Wechat user'),
    'plural label' => t('Wechat users'),
    'description' => t('Wechat users.'),
    'entity class' => 'WechatUser',
    'controller class' => 'EntityAPIController',
    'base table' => 'wechat_user',
    'fieldable' => TRUE,
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'uid',
      'label' => 'nickname'
    ),
    'access callback' => 'wechat_user_access',
    'module' => 'wechat_user',
    'metadata controller class' => 'WechatUserMetadataController',
    'bundles' => array(
      'wechat_user' => array(
        'label' => t('Wechat user'),
        'admin' => array(
          'path' => 'admin/structure/wechat_user',
          'access arguments' => array('administer users'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('User account'),
        'custom settings' => FALSE,
      ),
    ),
  );

  return $return;
}

function wechat_user_load($id, $reset = FALSE) {
  $return = wechat_user_load_multiple(array($id), array(), $reset);
  return reset($return);
}

function wechat_user_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('wechat_user', $ids, $conditions, $reset);
}

function wechat_user_load_by_openid($openid) {
  $entity = wechat_user_load_multiple(array(), array('openid' => $openid));
  return reset($entity);
}

function wechat_user_save(WechatUser $wechatUser) {
  return $wechatUser->save();
}


function wechat_user_access($op, $wechat_user = NULL, $account = NULL) {
  if (user_access('administer wechat user', $account)) {
    return TRUE;
  }
  return TRUE;
}

/**
 * Implements hook_permission().
 */
function wechat_user_permission() {
  return array(
    'wechat user update user info' => array(
      'title' => t('更新微信用户信息'),
      'description' => t('更新微信用户信息.'),
    ),
  );
}

function wechat_user_login($success, $error, $state = 1, $type = 'snsapi_base') {
  $we_obj = wechat_api_init_wechatobj();
  $auth_url = $we_obj->getOauthRedirect(url('wechat/auth', array(
    'absolute' => TRUE,
    'query' => array('destination' => $success, 'error' => $error)
  )), $state, $type);
  drupal_goto($auth_url);
}

function wechat_user_get_wechat_user_by_openid($openid) {
  $result = db_query("SELECT * FROM {wechat_user} WHERE openid=:openid", array(':openid' => $openid));
  if (!$result) {
    return FALSE;
  }
  return $result->fetchAssoc();
}

function wechat_user_get_user_by_openid($openid) {
  $result = db_query("SELECT * FROM {wechat_user} WHERE openid=:openid", array(':openid' => $openid));
  if (!$result) {
    return FALSE;
  }
  $authmap = $result->fetchAssoc();
  if (!empty($authmap['uid'])) {
    return user_load($authmap['uid']);
  }
  return FALSE;
}

function _wechat_user_login($uid) {
  global $user;
  $user = user_load($uid);
  drupal_session_regenerate();
}

function wechat_user_auth() {
  global $user;
  $wechat_obj = wechat_api_init_wechatobj();
  $state = isset($_GET['state']) ? $_GET['state'] : 0;
  $error = isset($_GET['error']) ? $_GET['error'] : '';
  $destination = isset($_GET['destination']) ? $_GET['destination'] : '';
  $code = isset($_GET['code']) ? $_GET['code'] : '';

  // user has logined
  if ($user->uid) {
    drupal_goto($destination);
  }

  // error
  if ((!$state) || (!$code)) { // error
    drupal_goto($error);
  }

  $access_data = $wechat_obj->getOauthAccessToken();


  if (empty($access_data)) {
    drupal_goto($error);
  }


  // check if already connectted
  if ($current_user = wechat_user_get_user_by_openid($access_data['openid'])) {
    _wechat_user_login($current_user->uid);
    // todo update user info
    if (empty($destination)) {
      $destination = 'user/' . $current_user->uid;
    }
    drupal_goto($destination);
  }


  // auto register
  $user_name = WUUPRE . $access_data['openid'];

  $new_user = array(
    'name' => $user_name,
    'pass' => user_password(),
    'status' => 1,
  );
  $role_id = variable_get('wechat_visitors', 0);
  if ($role_id) {
    $new_user['roles'] = array($role_id => $role_id);
  }
  // $account returns user object
  $account = user_save(NULL, $new_user);


  if (!$account) {
    drupal_goto($error);
  }

  _wechat_user_login($account->uid);

  //创建wechat_user实体
  $wechat_user_entity = entity_create('wechat_user', array());
  $wechat_user_entity->uid = $account->uid;
  $wechat_user_entity->openid = $access_data['openid'];
  $user_info = $wechat_obj->getOauthUserinfo($access_data['access_token'], $access_data['openid']);
  if (!empty($user_info)) {

//    $user_wrapper = entity_metadata_wrapper('user', $account);
//    $user_wrapper->field_user_name->set($user_info['nickname']);
//    $user_wrapper->save();

    //$wechat_user_entity->subscribe = $user_info['subscribe'];
    $wechat_user_entity->nickname = $user_name;//utf8_encode($user_info['nickname']);
    $wechat_user_entity->sex = $user_info['sex'];
    $wechat_user_entity->province = $user_info['province'];
    $wechat_user_entity->city = $user_info['city'];
    $wechat_user_entity->country = $user_info['country'];
    $wechat_user_entity->headimgurl = $user_info['headimgurl'];
    $wechat_user_entity->subscribe_time = time();
  }
  $wechat_user_entity->save();
  drupal_goto($destination);
}


/**
 * Implements hook_enable().
 */
function wechat_user_enable() {
  $role = user_role_load_by_name('微信访客');
  if (!$role) {
    $role = new stdClass();
    $role->name = '微信访客';
    user_role_save($role);
    $role = user_role_load_by_name('微信访客');
  }
  variable_set('wechat_visitors', $role->rid);
}

class WechatUser extends Entity {
  public $uid;
  public $openid;
  public $subscribe;
  public $nickname;
  public $sex;
  public $province;
  public $city;
  public $country;
  public $headimgurl;
  public $subscribe_time;

  protected function defaultUri() {
    return array('path' => 'wechat_user/' . $this->uid);
  }

  public function  nickname() {
    return $this->nickname;
  }

  public function  openid() {
    return $this->openid;
  }

  public function __construct($values = array()) {
    parent::__construct($values, 'wechat_user');
  }

  protected function defaultLabel() {
    return $this->nickname;
  }


  public function save() {
    parent::save();
  }
}

class WechatUserMetadataController extends EntityDefaultMetadataController {

  public function entityPropertyInfo() {
    $info = parent::entityPropertyInfo();
    $properties = &$info[$this->type]['properties'];

    $properties['user'] = array(
      'label' => t('UID'),
      'type' => 'user',
      'getter callback' => 'entity_property_getter_method',
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer wechat response message',
      'schema field' => 'uid',
      'required' => TRUE,
      'description' => t('Create time of wechat response message.'),
    );

    $properties['openid'] = array(
      'type' => 'text',
      'label' => t('Open id'),
      'description' => t('Openid of wechat user.'),
      'getter callback' => 'entity_property_getter_method',
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer wechat user',
      'schema field' => 'openid',
      'required' => TRUE,
    );

    $properties['subscribe'] = array(
      'label' => t('subscribe'),
      'description' => t('subscribe status of wechat user.'),
      'type' => 'integer',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer wechat user',
      'schema field' => 'subscribe',
    );

    $properties['nickname'] = array(
      'type' => 'text',
      'label' => t('nickname'),
      'description' => t('nickname of wechat user.'),
      'getter callback' => 'entity_property_getter_method',
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer wechat user',
      'schema field' => 'nickname',
    );

    $properties['sex'] = array(
      'label' => t('sex'),
      'description' => t('sex of wechat user.'),
      'type' => 'token',
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer wechat user',
      'options list' => 'wechat_wechatuser_sex_options_list',
      'schema field' => 'sex',
    );

    $properties['province'] = array(
      'type' => 'text',
      'label' => t('province'),
      'description' => t('province of wechat user.'),
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer wechat user',
      'schema field' => 'province',
    );

    $properties['city'] = array(
      'type' => 'text',
      'label' => t('city'),
      'description' => t('city of wechat user.'),
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer wechat user',
      'schema field' => 'city',
    );

    $properties['country'] = array(
      'type' => 'text',
      'label' => t('country'),
      'description' => t('country of wechat user.'),
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer wechat user',
      'schema field' => 'country',
    );

    $properties['headimgurl'] = array(
      'type' => 'text',
      'label' => t('headimgurl'),
      'description' => t('headimgurl of wechat user.'),
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer wechat user',
      'schema field' => 'headimgurl',
    );

    $properties['subscribe_time'] = array(
      'type' => 'date',
      'label' => t('Subscribe time'),
      'description' => t('Subscribe time of wechat user.'),
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer wechat user',
      'schema field' => 'subscribe_time',
      'required' => TRUE,
    );

    return $info;
  }
}


/**
 * Implements hook_rules_action_info().
 */
function wechat_user_rules_action_info() {
  $action['wechat_user_login_open_id'] = array(
    'parameter' => array(
      'open_id' => array(
        'type' => 'text',
        'label' => t('消息实体WechatReply'),
        'description' => t('The user whose roles should be changed.'),
        'save' => TRUE,
      )
    ),
    'group' => t('微信'),
    'access callback' => user_access('administer permissions'),
    'label' => t('使用微信OPENID登录'),
    'base' => 'wechat_user_login_open_id',
  );
  $action['wechat_user_registry_user'] = array(
    'parameter' => array(
      'open_id' => array(
        'type' => 'text',
        'label' => t('消息实体WechatReply'),
        'description' => t('The user whose roles should be changed.'),
        'save' => TRUE,
      )
    ),
    'group' => t('微信'),
    'access callback' => user_access('administer permissions'),
    'label' => t('注册用户'),
    'base' => 'wechat_user_registry_user',
  );
  $action['wechat_user_load_user'] = array(
    'parameter' => array(
      'open_id' => array(
        'type' => 'text',
        'label' => t('OpenId'),
        'description' => t('The user whose roles should be changed.'),
        'save' => TRUE,
      )
    ),
    'provides' => array(
      'user' => array(
        'type' => 'user',
        'label' => t('返回的用户实体'),
      ),
    ),
    'group' => t('微信'),
    'access callback' => user_access('administer permissions'),
    'label' => t('使用OpenId提取用户实体'),
    'base' => 'wechat_user_load_user',
  );
  return $action;
}

function wechat_user_login_open_id($openid) {
  $uid = wechat_user_get_user_by_openid($openid);
  watchdog('uid', json_encode($uid));
  _wechat_user_login($uid->uid);
}

function wechat_user_load_user($openid) {
  $user = wechat_user_get_user_by_openid($openid);
  return array('user' => $user);
}

/**
 * Implements hook_rules_condition_info().
 */
function wechat_user_rules_condition_info() {
  $condition['wechat_user_registry_status'] = array(
    'label' => t('微信用户注册状态'),
    'parameter' => array(
      'openid' => array(
        'type' => 'text',
        'label' => t('OpenId')
      ),
    ),
    'group' => t('微信'),
    'access callback' => 'rules_user_integration_access',
    'base' => 'wechat_user_registry_status',
  );
  return $condition;
}

function wechat_user_registry_status($openid) {
  if (!wechat_user_get_user_by_openid($openid)) {
    return TRUE;
  }
  return FALSE;
}